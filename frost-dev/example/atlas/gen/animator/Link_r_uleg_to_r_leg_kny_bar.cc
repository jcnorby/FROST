/*
 * Automatically Generated from Mathematica.
 * Wed 27 Dec 2017 22:39:14 GMT-06:00
 */

#ifdef MATLAB_MEX_FILE
#include <stdexcept>
#include <cmath>
/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
inline double Power(double x, double y) { return pow(x, y); }
inline double Sqrt(double x) { return sqrt(x); }

inline double Abs(double x) { return fabs(x); }

inline double Exp(double x) { return exp(x); }
inline double Log(double x) { return log(x); }

inline double Sin(double x) { return sin(x); }
inline double Cos(double x) { return cos(x); }
inline double Tan(double x) { return tan(x); }

inline double ArcSin(double x) { return asin(x); }
inline double ArcCos(double x) { return acos(x); }
inline double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
inline double ArcTan(double x, double y) { return atan2(y,x); }

inline double Sinh(double x) { return sinh(x); }
inline double Cosh(double x) { return cosh(x); }
inline double Tanh(double x) { return tanh(x); }

const double E	= 2.71828182845904523536029;
const double Pi = 3.14159265358979323846264;
const double Degree = 0.01745329251994329576924;


#endif

/*
 * Sub functions
 */
static void output1(double *p_output1,const double *var1)
{
  double t188;
  double t2687;
  double t4132;
  double t12063;
  double t12249;
  double t10747;
  double t11904;
  double t12965;
  double t13093;
  double t13159;
  double t13226;
  double t13897;
  double t14282;
  double t14517;
  double t14609;
  double t14629;
  double t14656;
  double t20695;
  double t21573;
  double t21824;
  double t10642;
  double t12019;
  double t12126;
  double t12234;
  double t12786;
  double t12999;
  double t13092;
  double t13248;
  double t14174;
  double t14247;
  double t14268;
  double t14543;
  double t14662;
  double t14668;
  double t14685;
  double t14728;
  double t16411;
  double t20044;
  double t20141;
  double t21826;
  double t21827;
  double t21828;
  double t21992;
  double t22181;
  double t23083;
  double t26467;
  double t14827;
  double t21997;
  double t26526;
  double t26630;
  double t34789;
  double t34840;
  double t34838;
  double t34841;
  double t34842;
  double t34848;
  double t34851;
  double t34855;
  double t34857;
  double t34859;
  double t34861;
  double t34867;
  double t34869;
  double t34870;
  double t34879;
  double t34883;
  double t34885;
  double t34790;
  double t34844;
  double t34856;
  double t34862;
  double t34872;
  double t34873;
  double t34874;
  double t34877;
  double t34887;
  double t34895;
  double t34896;
  double t34908;
  double t34912;
  double t34914;
  double t34919;
  double t34878;
  double t34911;
  double t34922;
  double t34924;
  double t35068;
  double t35069;
  double t35071;
  double t35074;
  double t35078;
  double t35085;
  double t35087;
  double t35088;
  double t35090;
  double t35093;
  double t35094;
  double t35095;
  double t35102;
  double t35104;
  double t35105;
  double t35067;
  double t35073;
  double t35086;
  double t35091;
  double t35096;
  double t35098;
  double t35099;
  double t35100;
  double t35106;
  double t35107;
  double t35108;
  double t35110;
  double t35115;
  double t35116;
  double t35117;
  double t35101;
  double t35112;
  double t35118;
  double t35119;
  double t26785;
  double t32860;
  double t33543;
  double t34272;
  double t34376;
  double t34410;
  double t34508;
  double t34547;
  double t34668;
  double t34678;
  double t34691;
  double t34703;
  double t34710;
  double t34722;
  double t34733;
  double t34744;
  double t34755;
  double t34776;
  double t35278;
  double t35280;
  double t35281;
  double t34926;
  double t34935;
  double t34944;
  double t34952;
  double t34965;
  double t34976;
  double t34986;
  double t34995;
  double t35005;
  double t35009;
  double t35014;
  double t35018;
  double t35030;
  double t35034;
  double t35039;
  double t35048;
  double t35053;
  double t35058;
  double t35370;
  double t35371;
  double t35375;
  double t35127;
  double t35135;
  double t35144;
  double t35151;
  double t35170;
  double t35178;
  double t35186;
  double t35205;
  double t35211;
  double t35218;
  double t35226;
  double t35230;
  double t35237;
  double t35244;
  double t35251;
  double t35257;
  double t35265;
  double t35270;
  double t35466;
  double t35467;
  double t35468;
  t188 = Cos(var1[4]);
  t2687 = Cos(var1[5]);
  t4132 = Sin(var1[19]);
  t12063 = Cos(var1[19]);
  t12249 = Sin(var1[5]);
  t10747 = Sin(var1[17]);
  t11904 = Sin(var1[4]);
  t12965 = Cos(var1[17]);
  t13093 = -1.*t188*t2687*t4132;
  t13159 = -1.*t12063*t188*t12249;
  t13226 = t13093 + t13159;
  t13897 = Cos(var1[18]);
  t14282 = Sin(var1[18]);
  t14517 = 0.05*t14282;
  t14609 = t12063*t188*t2687;
  t14629 = -1.*t188*t4132*t12249;
  t14656 = t14609 + t14629;
  t20695 = t12965*t11904;
  t21573 = -1.*t10747*t13226;
  t21824 = t20695 + t21573;
  t10642 = -0.089*t188*t2687*t4132;
  t12019 = 0.089*t10747*t11904;
  t12126 = -1.*t12063;
  t12234 = 1. + t12126;
  t12786 = 0.089*t12234*t188*t12249;
  t12999 = -1.*t12965;
  t13092 = 1. + t12999;
  t13248 = -0.089*t13092*t13226;
  t14174 = -1.*t13897;
  t14247 = 1. + t14174;
  t14268 = 0.05*t14247;
  t14543 = t14268 + t14517;
  t14662 = t14543*t14656;
  t14668 = t10747*t11904;
  t14685 = t12965*t13226;
  t14728 = t14668 + t14685;
  t16411 = -1. + t13897;
  t20044 = 0.05*t16411;
  t20141 = t20044 + t14517;
  t21826 = t20141*t21824;
  t21827 = t14282*t14656;
  t21828 = t13897*t21824;
  t21992 = t21827 + t21828;
  t22181 = t13897*t14656;
  t23083 = -1.*t14282*t21824;
  t26467 = t22181 + t23083;
  t14827 = -0.088281*t14728;
  t21997 = -0.051985*t21992;
  t26526 = 0.064851*t26467;
  t26630 = var1[0] + t10642 + t12019 + t12786 + t13248 + t14662 + t14827 + t21826 + t21997 + t26526;
  t34789 = Sin(var1[3]);
  t34840 = Cos(var1[3]);
  t34838 = t2687*t34789*t11904;
  t34841 = t34840*t12249;
  t34842 = t34838 + t34841;
  t34848 = t34840*t2687;
  t34851 = -1.*t34789*t11904*t12249;
  t34855 = t34848 + t34851;
  t34857 = -1.*t4132*t34842;
  t34859 = t12063*t34855;
  t34861 = t34857 + t34859;
  t34867 = t12063*t34842;
  t34869 = t4132*t34855;
  t34870 = t34867 + t34869;
  t34879 = -1.*t12965*t188*t34789;
  t34883 = -1.*t10747*t34861;
  t34885 = t34879 + t34883;
  t34790 = -0.089*t188*t10747*t34789;
  t34844 = -0.089*t4132*t34842;
  t34856 = -0.089*t12234*t34855;
  t34862 = -0.089*t13092*t34861;
  t34872 = t14543*t34870;
  t34873 = -1.*t188*t10747*t34789;
  t34874 = t12965*t34861;
  t34877 = t34873 + t34874;
  t34887 = t20141*t34885;
  t34895 = t14282*t34870;
  t34896 = t13897*t34885;
  t34908 = t34895 + t34896;
  t34912 = t13897*t34870;
  t34914 = -1.*t14282*t34885;
  t34919 = t34912 + t34914;
  t34878 = -0.088281*t34877;
  t34911 = -0.051985*t34908;
  t34922 = 0.064851*t34919;
  t34924 = var1[1] + t34790 + t34844 + t34856 + t34862 + t34872 + t34878 + t34887 + t34911 + t34922;
  t35068 = -1.*t34840*t2687*t11904;
  t35069 = t34789*t12249;
  t35071 = t35068 + t35069;
  t35074 = t2687*t34789;
  t35078 = t34840*t11904*t12249;
  t35085 = t35074 + t35078;
  t35087 = -1.*t4132*t35071;
  t35088 = t12063*t35085;
  t35090 = t35087 + t35088;
  t35093 = t12063*t35071;
  t35094 = t4132*t35085;
  t35095 = t35093 + t35094;
  t35102 = t12965*t34840*t188;
  t35104 = -1.*t10747*t35090;
  t35105 = t35102 + t35104;
  t35067 = 0.089*t34840*t188*t10747;
  t35073 = -0.089*t4132*t35071;
  t35086 = -0.089*t12234*t35085;
  t35091 = -0.089*t13092*t35090;
  t35096 = t14543*t35095;
  t35098 = t34840*t188*t10747;
  t35099 = t12965*t35090;
  t35100 = t35098 + t35099;
  t35106 = t20141*t35105;
  t35107 = t14282*t35095;
  t35108 = t13897*t35105;
  t35110 = t35107 + t35108;
  t35115 = t13897*t35095;
  t35116 = -1.*t14282*t35105;
  t35117 = t35115 + t35116;
  t35101 = -0.088281*t35100;
  t35112 = -0.051985*t35110;
  t35118 = 0.064851*t35117;
  t35119 = var1[2] + t35067 + t35073 + t35086 + t35091 + t35096 + t35101 + t35106 + t35112 + t35118;
  t26785 = -0.093185*t14728;
  t32860 = -0.097635*t14728;
  t33543 = -0.10115*t14728;
  t34272 = -0.103348*t14728;
  t34376 = -0.103991*t14728;
  t34410 = -0.10301*t14728;
  t34508 = -0.10051*t14728;
  t34547 = -0.096764*t14728;
  t34668 = -0.092176*t14728;
  t34678 = -0.087243*t14728;
  t34691 = -0.082502*t14728;
  t34703 = -0.078464*t14728;
  t34710 = -0.075568*t14728;
  t34722 = -0.074128*t14728;
  t34733 = -0.074299*t14728;
  t34744 = -0.076064*t14728;
  t34755 = -0.07923*t14728;
  t34776 = -0.083455*t14728;
  t35278 = -0.425985*t21992;
  t35280 = 0.014851*t26467;
  t35281 = var1[0] + t10642 + t12019 + t12786 + t13248 + t14662 + t14827 + t21826 + t35278 + t35280;
  t34926 = -0.093185*t34877;
  t34935 = -0.097635*t34877;
  t34944 = -0.10115*t34877;
  t34952 = -0.103348*t34877;
  t34965 = -0.103991*t34877;
  t34976 = -0.10301*t34877;
  t34986 = -0.10051*t34877;
  t34995 = -0.096764*t34877;
  t35005 = -0.092176*t34877;
  t35009 = -0.087243*t34877;
  t35014 = -0.082502*t34877;
  t35018 = -0.078464*t34877;
  t35030 = -0.075568*t34877;
  t35034 = -0.074128*t34877;
  t35039 = -0.074299*t34877;
  t35048 = -0.076064*t34877;
  t35053 = -0.07923*t34877;
  t35058 = -0.083455*t34877;
  t35370 = -0.425985*t34908;
  t35371 = 0.014851*t34919;
  t35375 = var1[1] + t34790 + t34844 + t34856 + t34862 + t34872 + t34878 + t34887 + t35370 + t35371;
  t35127 = -0.093185*t35100;
  t35135 = -0.097635*t35100;
  t35144 = -0.10115*t35100;
  t35151 = -0.103348*t35100;
  t35170 = -0.103991*t35100;
  t35178 = -0.10301*t35100;
  t35186 = -0.10051*t35100;
  t35205 = -0.096764*t35100;
  t35211 = -0.092176*t35100;
  t35218 = -0.087243*t35100;
  t35226 = -0.082502*t35100;
  t35230 = -0.078464*t35100;
  t35237 = -0.075568*t35100;
  t35244 = -0.074128*t35100;
  t35251 = -0.074299*t35100;
  t35257 = -0.076064*t35100;
  t35265 = -0.07923*t35100;
  t35270 = -0.083455*t35100;
  t35466 = -0.425985*t35110;
  t35467 = 0.014851*t35117;
  t35468 = var1[2] + t35067 + t35073 + t35086 + t35091 + t35096 + t35101 + t35106 + t35466 + t35467;
  p_output1[0]=t26630;
  p_output1[1]=t10642 + t12019 + t12786 + t13248 + t14662 + t21826 - 0.051909*t21992 + 0.064277*t26467 + t26785 + var1[0];
  p_output1[2]=t10642 + t12019 + t12786 + t13248 + t14662 + t21826 - 0.051625*t21992 + 0.062157*t26467 + t32860 + var1[0];
  p_output1[3]=t10642 + t12019 + t12786 + t13248 + t14662 + t21826 - 0.051166*t21992 + 0.058719*t26467 + t33543 + var1[0];
  p_output1[4]=t10642 + t12019 + t12786 + t13248 + t14662 + t21826 - 0.05058*t21992 + 0.054337*t26467 + t34272 + var1[0];
  p_output1[5]=t10642 + t12019 + t12786 + t13248 + t14662 + t21826 - 0.049931*t21992 + 0.049484*t26467 + t34376 + var1[0];
  p_output1[6]=t10642 + t12019 + t12786 + t13248 + t14662 + t21826 - 0.04929*t21992 + 0.044687*t26467 + t34410 + var1[0];
  p_output1[7]=t10642 + t12019 + t12786 + t13248 + t14662 + t21826 - 0.048725*t21992 + 0.040466*t26467 + t34508 + var1[0];
  p_output1[8]=t10642 + t12019 + t12786 + t13248 + t14662 + t21826 - 0.048299*t21992 + 0.037279*t26467 + t34547 + var1[0];
  p_output1[9]=t10642 + t12019 + t12786 + t13248 + t14662 + t21826 - 0.048057*t21992 + 0.035469*t26467 + t34668 + var1[0];
  p_output1[10]=t10642 + t12019 + t12786 + t13248 + t14662 + t21826 - 0.048026*t21992 + 0.035235*t26467 + t34678 + var1[0];
  p_output1[11]=t10642 + t12019 + t12786 + t13248 + t14662 + t21826 - 0.048209*t21992 + 0.0366*t26467 + t34691 + var1[0];
  p_output1[12]=t10642 + t12019 + t12786 + t13248 + t14662 + t21826 - 0.048585*t21992 + 0.039417*t26467 + t34703 + var1[0];
  p_output1[13]=t10642 + t12019 + t12786 + t13248 + t14662 + t21826 - 0.049115*t21992 + 0.043382*t26467 + t34710 + var1[0];
  p_output1[14]=t10642 + t12019 + t12786 + t13248 + t14662 + t21826 - 0.049741*t21992 + 0.048063*t26467 + t34722 + var1[0];
  p_output1[15]=t10642 + t12019 + t12786 + t13248 + t14662 + t21826 - 0.050395*t21992 + 0.052955*t26467 + t34733 + var1[0];
  p_output1[16]=t10642 + t12019 + t12786 + t13248 + t14662 + t21826 - 0.051006*t21992 + 0.057526*t26467 + t34744 + var1[0];
  p_output1[17]=t10642 + t12019 + t12786 + t13248 + t14662 + t21826 - 0.051508*t21992 + 0.061281*t26467 + t34755 + var1[0];
  p_output1[18]=t10642 + t12019 + t12786 + t13248 + t14662 + t21826 - 0.051847*t21992 + 0.063814*t26467 + t34776 + var1[0];
  p_output1[19]=t26630;
  p_output1[20]=t34924;
  p_output1[21]=t34790 + t34844 + t34856 + t34862 + t34872 + t34887 - 0.051909*t34908 + 0.064277*t34919 + t34926 + var1[1];
  p_output1[22]=t34790 + t34844 + t34856 + t34862 + t34872 + t34887 - 0.051625*t34908 + 0.062157*t34919 + t34935 + var1[1];
  p_output1[23]=t34790 + t34844 + t34856 + t34862 + t34872 + t34887 - 0.051166*t34908 + 0.058719*t34919 + t34944 + var1[1];
  p_output1[24]=t34790 + t34844 + t34856 + t34862 + t34872 + t34887 - 0.05058*t34908 + 0.054337*t34919 + t34952 + var1[1];
  p_output1[25]=t34790 + t34844 + t34856 + t34862 + t34872 + t34887 - 0.049931*t34908 + 0.049484*t34919 + t34965 + var1[1];
  p_output1[26]=t34790 + t34844 + t34856 + t34862 + t34872 + t34887 - 0.04929*t34908 + 0.044687*t34919 + t34976 + var1[1];
  p_output1[27]=t34790 + t34844 + t34856 + t34862 + t34872 + t34887 - 0.048725*t34908 + 0.040466*t34919 + t34986 + var1[1];
  p_output1[28]=t34790 + t34844 + t34856 + t34862 + t34872 + t34887 - 0.048299*t34908 + 0.037279*t34919 + t34995 + var1[1];
  p_output1[29]=t34790 + t34844 + t34856 + t34862 + t34872 + t34887 - 0.048057*t34908 + 0.035469*t34919 + t35005 + var1[1];
  p_output1[30]=t34790 + t34844 + t34856 + t34862 + t34872 + t34887 - 0.048026*t34908 + 0.035235*t34919 + t35009 + var1[1];
  p_output1[31]=t34790 + t34844 + t34856 + t34862 + t34872 + t34887 - 0.048209*t34908 + 0.0366*t34919 + t35014 + var1[1];
  p_output1[32]=t34790 + t34844 + t34856 + t34862 + t34872 + t34887 - 0.048585*t34908 + 0.039417*t34919 + t35018 + var1[1];
  p_output1[33]=t34790 + t34844 + t34856 + t34862 + t34872 + t34887 - 0.049115*t34908 + 0.043382*t34919 + t35030 + var1[1];
  p_output1[34]=t34790 + t34844 + t34856 + t34862 + t34872 + t34887 - 0.049741*t34908 + 0.048063*t34919 + t35034 + var1[1];
  p_output1[35]=t34790 + t34844 + t34856 + t34862 + t34872 + t34887 - 0.050395*t34908 + 0.052955*t34919 + t35039 + var1[1];
  p_output1[36]=t34790 + t34844 + t34856 + t34862 + t34872 + t34887 - 0.051006*t34908 + 0.057526*t34919 + t35048 + var1[1];
  p_output1[37]=t34790 + t34844 + t34856 + t34862 + t34872 + t34887 - 0.051508*t34908 + 0.061281*t34919 + t35053 + var1[1];
  p_output1[38]=t34790 + t34844 + t34856 + t34862 + t34872 + t34887 - 0.051847*t34908 + 0.063814*t34919 + t35058 + var1[1];
  p_output1[39]=t34924;
  p_output1[40]=t35119;
  p_output1[41]=t35067 + t35073 + t35086 + t35091 + t35096 + t35106 - 0.051909*t35110 + 0.064277*t35117 + t35127 + var1[2];
  p_output1[42]=t35067 + t35073 + t35086 + t35091 + t35096 + t35106 - 0.051625*t35110 + 0.062157*t35117 + t35135 + var1[2];
  p_output1[43]=t35067 + t35073 + t35086 + t35091 + t35096 + t35106 - 0.051166*t35110 + 0.058719*t35117 + t35144 + var1[2];
  p_output1[44]=t35067 + t35073 + t35086 + t35091 + t35096 + t35106 - 0.05058*t35110 + 0.054337*t35117 + t35151 + var1[2];
  p_output1[45]=t35067 + t35073 + t35086 + t35091 + t35096 + t35106 - 0.049931*t35110 + 0.049484*t35117 + t35170 + var1[2];
  p_output1[46]=t35067 + t35073 + t35086 + t35091 + t35096 + t35106 - 0.04929*t35110 + 0.044687*t35117 + t35178 + var1[2];
  p_output1[47]=t35067 + t35073 + t35086 + t35091 + t35096 + t35106 - 0.048725*t35110 + 0.040466*t35117 + t35186 + var1[2];
  p_output1[48]=t35067 + t35073 + t35086 + t35091 + t35096 + t35106 - 0.048299*t35110 + 0.037279*t35117 + t35205 + var1[2];
  p_output1[49]=t35067 + t35073 + t35086 + t35091 + t35096 + t35106 - 0.048057*t35110 + 0.035469*t35117 + t35211 + var1[2];
  p_output1[50]=t35067 + t35073 + t35086 + t35091 + t35096 + t35106 - 0.048026*t35110 + 0.035235*t35117 + t35218 + var1[2];
  p_output1[51]=t35067 + t35073 + t35086 + t35091 + t35096 + t35106 - 0.048209*t35110 + 0.0366*t35117 + t35226 + var1[2];
  p_output1[52]=t35067 + t35073 + t35086 + t35091 + t35096 + t35106 - 0.048585*t35110 + 0.039417*t35117 + t35230 + var1[2];
  p_output1[53]=t35067 + t35073 + t35086 + t35091 + t35096 + t35106 - 0.049115*t35110 + 0.043382*t35117 + t35237 + var1[2];
  p_output1[54]=t35067 + t35073 + t35086 + t35091 + t35096 + t35106 - 0.049741*t35110 + 0.048063*t35117 + t35244 + var1[2];
  p_output1[55]=t35067 + t35073 + t35086 + t35091 + t35096 + t35106 - 0.050395*t35110 + 0.052955*t35117 + t35251 + var1[2];
  p_output1[56]=t35067 + t35073 + t35086 + t35091 + t35096 + t35106 - 0.051006*t35110 + 0.057526*t35117 + t35257 + var1[2];
  p_output1[57]=t35067 + t35073 + t35086 + t35091 + t35096 + t35106 - 0.051508*t35110 + 0.061281*t35117 + t35265 + var1[2];
  p_output1[58]=t35067 + t35073 + t35086 + t35091 + t35096 + t35106 - 0.051847*t35110 + 0.063814*t35117 + t35270 + var1[2];
  p_output1[59]=t35119;
  p_output1[60]=t35281;
  p_output1[61]=t10642 + t12019 + t12786 + t13248 + t14662 + t21826 - 0.425909*t21992 + 0.014277*t26467 + t26785 + var1[0];
  p_output1[62]=t10642 + t12019 + t12786 + t13248 + t14662 + t21826 - 0.425625*t21992 + 0.012157*t26467 + t32860 + var1[0];
  p_output1[63]=t10642 + t12019 + t12786 + t13248 + t14662 + t21826 - 0.425166*t21992 + 0.008719*t26467 + t33543 + var1[0];
  p_output1[64]=t10642 + t12019 + t12786 + t13248 + t14662 + t21826 - 0.42458*t21992 + 0.004337*t26467 + t34272 + var1[0];
  p_output1[65]=t10642 + t12019 + t12786 + t13248 + t14662 + t21826 - 0.423931*t21992 - 0.000516*t26467 + t34376 + var1[0];
  p_output1[66]=t10642 + t12019 + t12786 + t13248 + t14662 + t21826 - 0.42329*t21992 - 0.005313*t26467 + t34410 + var1[0];
  p_output1[67]=t10642 + t12019 + t12786 + t13248 + t14662 + t21826 - 0.422725*t21992 - 0.009534*t26467 + t34508 + var1[0];
  p_output1[68]=t10642 + t12019 + t12786 + t13248 + t14662 + t21826 - 0.422299*t21992 - 0.012721*t26467 + t34547 + var1[0];
  p_output1[69]=t10642 + t12019 + t12786 + t13248 + t14662 + t21826 - 0.422057*t21992 - 0.014531*t26467 + t34668 + var1[0];
  p_output1[70]=t10642 + t12019 + t12786 + t13248 + t14662 + t21826 - 0.422026*t21992 - 0.014765*t26467 + t34678 + var1[0];
  p_output1[71]=t10642 + t12019 + t12786 + t13248 + t14662 + t21826 - 0.422209*t21992 - 0.0134*t26467 + t34691 + var1[0];
  p_output1[72]=t10642 + t12019 + t12786 + t13248 + t14662 + t21826 - 0.422585*t21992 - 0.010583*t26467 + t34703 + var1[0];
  p_output1[73]=t10642 + t12019 + t12786 + t13248 + t14662 + t21826 - 0.423115*t21992 - 0.006618*t26467 + t34710 + var1[0];
  p_output1[74]=t10642 + t12019 + t12786 + t13248 + t14662 + t21826 - 0.423741*t21992 - 0.001937*t26467 + t34722 + var1[0];
  p_output1[75]=t10642 + t12019 + t12786 + t13248 + t14662 + t21826 - 0.424395*t21992 + 0.002955*t26467 + t34733 + var1[0];
  p_output1[76]=t10642 + t12019 + t12786 + t13248 + t14662 + t21826 - 0.425006*t21992 + 0.007526*t26467 + t34744 + var1[0];
  p_output1[77]=t10642 + t12019 + t12786 + t13248 + t14662 + t21826 - 0.425508*t21992 + 0.011281*t26467 + t34755 + var1[0];
  p_output1[78]=t10642 + t12019 + t12786 + t13248 + t14662 + t21826 - 0.425847*t21992 + 0.013814*t26467 + t34776 + var1[0];
  p_output1[79]=t35281;
  p_output1[80]=t35375;
  p_output1[81]=t34790 + t34844 + t34856 + t34862 + t34872 + t34887 - 0.425909*t34908 + 0.014277*t34919 + t34926 + var1[1];
  p_output1[82]=t34790 + t34844 + t34856 + t34862 + t34872 + t34887 - 0.425625*t34908 + 0.012157*t34919 + t34935 + var1[1];
  p_output1[83]=t34790 + t34844 + t34856 + t34862 + t34872 + t34887 - 0.425166*t34908 + 0.008719*t34919 + t34944 + var1[1];
  p_output1[84]=t34790 + t34844 + t34856 + t34862 + t34872 + t34887 - 0.42458*t34908 + 0.004337*t34919 + t34952 + var1[1];
  p_output1[85]=t34790 + t34844 + t34856 + t34862 + t34872 + t34887 - 0.423931*t34908 - 0.000516*t34919 + t34965 + var1[1];
  p_output1[86]=t34790 + t34844 + t34856 + t34862 + t34872 + t34887 - 0.42329*t34908 - 0.005313*t34919 + t34976 + var1[1];
  p_output1[87]=t34790 + t34844 + t34856 + t34862 + t34872 + t34887 - 0.422725*t34908 - 0.009534*t34919 + t34986 + var1[1];
  p_output1[88]=t34790 + t34844 + t34856 + t34862 + t34872 + t34887 - 0.422299*t34908 - 0.012721*t34919 + t34995 + var1[1];
  p_output1[89]=t34790 + t34844 + t34856 + t34862 + t34872 + t34887 - 0.422057*t34908 - 0.014531*t34919 + t35005 + var1[1];
  p_output1[90]=t34790 + t34844 + t34856 + t34862 + t34872 + t34887 - 0.422026*t34908 - 0.014765*t34919 + t35009 + var1[1];
  p_output1[91]=t34790 + t34844 + t34856 + t34862 + t34872 + t34887 - 0.422209*t34908 - 0.0134*t34919 + t35014 + var1[1];
  p_output1[92]=t34790 + t34844 + t34856 + t34862 + t34872 + t34887 - 0.422585*t34908 - 0.010583*t34919 + t35018 + var1[1];
  p_output1[93]=t34790 + t34844 + t34856 + t34862 + t34872 + t34887 - 0.423115*t34908 - 0.006618*t34919 + t35030 + var1[1];
  p_output1[94]=t34790 + t34844 + t34856 + t34862 + t34872 + t34887 - 0.423741*t34908 - 0.001937*t34919 + t35034 + var1[1];
  p_output1[95]=t34790 + t34844 + t34856 + t34862 + t34872 + t34887 - 0.424395*t34908 + 0.002955*t34919 + t35039 + var1[1];
  p_output1[96]=t34790 + t34844 + t34856 + t34862 + t34872 + t34887 - 0.425006*t34908 + 0.007526*t34919 + t35048 + var1[1];
  p_output1[97]=t34790 + t34844 + t34856 + t34862 + t34872 + t34887 - 0.425508*t34908 + 0.011281*t34919 + t35053 + var1[1];
  p_output1[98]=t34790 + t34844 + t34856 + t34862 + t34872 + t34887 - 0.425847*t34908 + 0.013814*t34919 + t35058 + var1[1];
  p_output1[99]=t35375;
  p_output1[100]=t35468;
  p_output1[101]=t35067 + t35073 + t35086 + t35091 + t35096 + t35106 - 0.425909*t35110 + 0.014277*t35117 + t35127 + var1[2];
  p_output1[102]=t35067 + t35073 + t35086 + t35091 + t35096 + t35106 - 0.425625*t35110 + 0.012157*t35117 + t35135 + var1[2];
  p_output1[103]=t35067 + t35073 + t35086 + t35091 + t35096 + t35106 - 0.425166*t35110 + 0.008719*t35117 + t35144 + var1[2];
  p_output1[104]=t35067 + t35073 + t35086 + t35091 + t35096 + t35106 - 0.42458*t35110 + 0.004337*t35117 + t35151 + var1[2];
  p_output1[105]=t35067 + t35073 + t35086 + t35091 + t35096 + t35106 - 0.423931*t35110 - 0.000516*t35117 + t35170 + var1[2];
  p_output1[106]=t35067 + t35073 + t35086 + t35091 + t35096 + t35106 - 0.42329*t35110 - 0.005313*t35117 + t35178 + var1[2];
  p_output1[107]=t35067 + t35073 + t35086 + t35091 + t35096 + t35106 - 0.422725*t35110 - 0.009534*t35117 + t35186 + var1[2];
  p_output1[108]=t35067 + t35073 + t35086 + t35091 + t35096 + t35106 - 0.422299*t35110 - 0.012721*t35117 + t35205 + var1[2];
  p_output1[109]=t35067 + t35073 + t35086 + t35091 + t35096 + t35106 - 0.422057*t35110 - 0.014531*t35117 + t35211 + var1[2];
  p_output1[110]=t35067 + t35073 + t35086 + t35091 + t35096 + t35106 - 0.422026*t35110 - 0.014765*t35117 + t35218 + var1[2];
  p_output1[111]=t35067 + t35073 + t35086 + t35091 + t35096 + t35106 - 0.422209*t35110 - 0.0134*t35117 + t35226 + var1[2];
  p_output1[112]=t35067 + t35073 + t35086 + t35091 + t35096 + t35106 - 0.422585*t35110 - 0.010583*t35117 + t35230 + var1[2];
  p_output1[113]=t35067 + t35073 + t35086 + t35091 + t35096 + t35106 - 0.423115*t35110 - 0.006618*t35117 + t35237 + var1[2];
  p_output1[114]=t35067 + t35073 + t35086 + t35091 + t35096 + t35106 - 0.423741*t35110 - 0.001937*t35117 + t35244 + var1[2];
  p_output1[115]=t35067 + t35073 + t35086 + t35091 + t35096 + t35106 - 0.424395*t35110 + 0.002955*t35117 + t35251 + var1[2];
  p_output1[116]=t35067 + t35073 + t35086 + t35091 + t35096 + t35106 - 0.425006*t35110 + 0.007526*t35117 + t35257 + var1[2];
  p_output1[117]=t35067 + t35073 + t35086 + t35091 + t35096 + t35106 - 0.425508*t35110 + 0.011281*t35117 + t35265 + var1[2];
  p_output1[118]=t35067 + t35073 + t35086 + t35091 + t35096 + t35106 - 0.425847*t35110 + 0.013814*t35117 + t35270 + var1[2];
  p_output1[119]=t35468;
}



#ifdef MATLAB_MEX_FILE

#include "mex.h"
/*
 * Main function
 */
void mexFunction( int nlhs, mxArray *plhs[],
                  int nrhs, const mxArray *prhs[] )
{
  size_t mrows, ncols;

  double *var1;
  double *p_output1;

  /*  Check for proper number of arguments.  */ 
  if( nrhs != 1)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:invalidNumInputs", "One input(s) required (var1).");
    }
  else if( nlhs > 1)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:maxlhs", "Too many output arguments.");
    }

  /*  The input must be a noncomplex double vector or scaler.  */
  mrows = mxGetM(prhs[0]);
  ncols = mxGetN(prhs[0]);
  if( !mxIsDouble(prhs[0]) || mxIsComplex(prhs[0]) ||
    ( !(mrows == 21 && ncols == 1) && 
      !(mrows == 1 && ncols == 21))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var1 is wrong.");
    }

  /*  Assign pointers to each input.  */
  var1 = mxGetPr(prhs[0]);
   


   
  /*  Create matrices for return arguments.  */
  plhs[0] = mxCreateDoubleMatrix((mwSize) 20, (mwSize) 6, mxREAL);
  p_output1 = mxGetPr(plhs[0]);


  /* Call the calculation subroutine. */
  output1(p_output1,var1);


}

#else // MATLAB_MEX_FILE

#include "Link_r_uleg_to_r_leg_kny_bar.hh"

namespace SymFunction
{

void Link_r_uleg_to_r_leg_kny_bar_raw(double *p_output1, const double *var1)
{
  // Call Subroutines
  output1(p_output1, var1);

}

}

#endif // MATLAB_MEX_FILE
