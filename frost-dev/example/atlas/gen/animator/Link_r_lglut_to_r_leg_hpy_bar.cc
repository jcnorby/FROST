/*
 * Automatically Generated from Mathematica.
 * Wed 27 Dec 2017 22:39:07 GMT-06:00
 */

#ifdef MATLAB_MEX_FILE
#include <stdexcept>
#include <cmath>
/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
inline double Power(double x, double y) { return pow(x, y); }
inline double Sqrt(double x) { return sqrt(x); }

inline double Abs(double x) { return fabs(x); }

inline double Exp(double x) { return exp(x); }
inline double Log(double x) { return log(x); }

inline double Sin(double x) { return sin(x); }
inline double Cos(double x) { return cos(x); }
inline double Tan(double x) { return tan(x); }

inline double ArcSin(double x) { return asin(x); }
inline double ArcCos(double x) { return acos(x); }
inline double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
inline double ArcTan(double x, double y) { return atan2(y,x); }

inline double Sinh(double x) { return sinh(x); }
inline double Cosh(double x) { return cosh(x); }
inline double Tanh(double x) { return tanh(x); }

const double E	= 2.71828182845904523536029;
const double Pi = 3.14159265358979323846264;
const double Degree = 0.01745329251994329576924;


#endif

/*
 * Sub functions
 */
static void output1(double *p_output1,const double *var1)
{
  double t33219;
  double t33618;
  double t33658;
  double t33728;
  double t33761;
  double t33698;
  double t33715;
  double t33811;
  double t33831;
  double t33836;
  double t33837;
  double t33659;
  double t33727;
  double t33732;
  double t33733;
  double t33799;
  double t33819;
  double t33830;
  double t33843;
  double t33867;
  double t33880;
  double t33897;
  double t33930;
  double t33976;
  double t33983;
  double t34007;
  double t34026;
  double t34037;
  double t33926;
  double t34001;
  double t34057;
  double t34075;
  double t34549;
  double t34552;
  double t34551;
  double t34555;
  double t34556;
  double t34559;
  double t34560;
  double t34561;
  double t34570;
  double t34579;
  double t34580;
  double t34550;
  double t34558;
  double t34562;
  double t34581;
  double t34588;
  double t34591;
  double t34595;
  double t34599;
  double t34604;
  double t34609;
  double t34611;
  double t34615;
  double t34619;
  double t34596;
  double t34610;
  double t34626;
  double t34627;
  double t34795;
  double t34796;
  double t34797;
  double t34802;
  double t34803;
  double t34808;
  double t34810;
  double t34811;
  double t34812;
  double t34791;
  double t34801;
  double t34809;
  double t34815;
  double t34816;
  double t34817;
  double t34818;
  double t34822;
  double t34823;
  double t34824;
  double t34827;
  double t34828;
  double t34832;
  double t34819;
  double t34826;
  double t34833;
  double t34834;
  double t34085;
  double t34181;
  double t34270;
  double t34278;
  double t34286;
  double t34292;
  double t34352;
  double t34375;
  double t34388;
  double t34394;
  double t34405;
  double t34413;
  double t34491;
  double t34503;
  double t34511;
  double t34523;
  double t34531;
  double t34537;
  double t34988;
  double t34989;
  double t34990;
  double t34629;
  double t34645;
  double t34651;
  double t34671;
  double t34679;
  double t34688;
  double t34696;
  double t34705;
  double t34712;
  double t34718;
  double t34724;
  double t34734;
  double t34740;
  double t34750;
  double t34762;
  double t34772;
  double t34777;
  double t34788;
  double t35080;
  double t35081;
  double t35084;
  double t34839;
  double t34843;
  double t34854;
  double t34858;
  double t34865;
  double t34871;
  double t34876;
  double t34881;
  double t34913;
  double t34923;
  double t34929;
  double t34936;
  double t34940;
  double t34950;
  double t34954;
  double t34966;
  double t34975;
  double t34983;
  double t35198;
  double t35199;
  double t35203;
  t33219 = Cos(var1[4]);
  t33618 = Cos(var1[5]);
  t33658 = Sin(var1[19]);
  t33728 = Cos(var1[19]);
  t33761 = Sin(var1[5]);
  t33698 = Sin(var1[17]);
  t33715 = Sin(var1[4]);
  t33811 = Cos(var1[17]);
  t33831 = -1.*t33219*t33618*t33658;
  t33836 = -1.*t33728*t33219*t33761;
  t33837 = t33831 + t33836;
  t33659 = -0.089*t33219*t33618*t33658;
  t33727 = 0.089*t33698*t33715;
  t33732 = -1.*t33728;
  t33733 = 1. + t33732;
  t33799 = 0.089*t33733*t33219*t33761;
  t33819 = -1.*t33811;
  t33830 = 1. + t33819;
  t33843 = -0.089*t33830*t33837;
  t33867 = t33728*t33219*t33618;
  t33880 = -1.*t33219*t33658*t33761;
  t33897 = t33867 + t33880;
  t33930 = t33698*t33715;
  t33976 = t33811*t33837;
  t33983 = t33930 + t33976;
  t34007 = t33811*t33715;
  t34026 = -1.*t33698*t33837;
  t34037 = t34007 + t34026;
  t33926 = 0.00847*t33897;
  t34001 = -0.079972*t33983;
  t34057 = 0.00847*t34037;
  t34075 = var1[0] + t33659 + t33727 + t33799 + t33843 + t33926 + t34001 + t34057;
  t34549 = Sin(var1[3]);
  t34552 = Cos(var1[3]);
  t34551 = t33618*t34549*t33715;
  t34555 = t34552*t33761;
  t34556 = t34551 + t34555;
  t34559 = t34552*t33618;
  t34560 = -1.*t34549*t33715*t33761;
  t34561 = t34559 + t34560;
  t34570 = -1.*t33658*t34556;
  t34579 = t33728*t34561;
  t34580 = t34570 + t34579;
  t34550 = -0.089*t33219*t33698*t34549;
  t34558 = -0.089*t33658*t34556;
  t34562 = -0.089*t33733*t34561;
  t34581 = -0.089*t33830*t34580;
  t34588 = t33728*t34556;
  t34591 = t33658*t34561;
  t34595 = t34588 + t34591;
  t34599 = -1.*t33219*t33698*t34549;
  t34604 = t33811*t34580;
  t34609 = t34599 + t34604;
  t34611 = -1.*t33811*t33219*t34549;
  t34615 = -1.*t33698*t34580;
  t34619 = t34611 + t34615;
  t34596 = 0.00847*t34595;
  t34610 = -0.079972*t34609;
  t34626 = 0.00847*t34619;
  t34627 = var1[1] + t34550 + t34558 + t34562 + t34581 + t34596 + t34610 + t34626;
  t34795 = -1.*t34552*t33618*t33715;
  t34796 = t34549*t33761;
  t34797 = t34795 + t34796;
  t34802 = t33618*t34549;
  t34803 = t34552*t33715*t33761;
  t34808 = t34802 + t34803;
  t34810 = -1.*t33658*t34797;
  t34811 = t33728*t34808;
  t34812 = t34810 + t34811;
  t34791 = 0.089*t34552*t33219*t33698;
  t34801 = -0.089*t33658*t34797;
  t34809 = -0.089*t33733*t34808;
  t34815 = -0.089*t33830*t34812;
  t34816 = t33728*t34797;
  t34817 = t33658*t34808;
  t34818 = t34816 + t34817;
  t34822 = t34552*t33219*t33698;
  t34823 = t33811*t34812;
  t34824 = t34822 + t34823;
  t34827 = t33811*t34552*t33219;
  t34828 = -1.*t33698*t34812;
  t34832 = t34827 + t34828;
  t34819 = 0.00847*t34818;
  t34826 = -0.079972*t34824;
  t34833 = 0.00847*t34832;
  t34834 = var1[2] + t34791 + t34801 + t34809 + t34815 + t34819 + t34826 + t34833;
  t34085 = -0.084351*t33983;
  t34181 = -0.089233*t33983;
  t34270 = -0.09409*t33983;
  t34278 = -0.098396*t33983;
  t34286 = -0.101684*t33983;
  t34292 = -0.103596*t33983;
  t34352 = -0.103928*t33983;
  t34375 = -0.102641*t33983;
  t34388 = -0.099877*t33983;
  t34394 = -0.095933*t33983;
  t34405 = -0.091239*t33983;
  t34413 = -0.086301*t33983;
  t34491 = -0.081657*t33983;
  t34503 = -0.077808*t33983;
  t34511 = -0.075171*t33983;
  t34523 = -0.074034*t33983;
  t34531 = -0.074518*t33983;
  t34537 = -0.076572*t33983;
  t34988 = 0.05847*t33897;
  t34989 = -0.04153*t34037;
  t34990 = var1[0] + t33659 + t33727 + t33799 + t33843 + t34988 + t34001 + t34989;
  t34629 = -0.084351*t34609;
  t34645 = -0.089233*t34609;
  t34651 = -0.09409*t34609;
  t34671 = -0.098396*t34609;
  t34679 = -0.101684*t34609;
  t34688 = -0.103596*t34609;
  t34696 = -0.103928*t34609;
  t34705 = -0.102641*t34609;
  t34712 = -0.099877*t34609;
  t34718 = -0.095933*t34609;
  t34724 = -0.091239*t34609;
  t34734 = -0.086301*t34609;
  t34740 = -0.081657*t34609;
  t34750 = -0.077808*t34609;
  t34762 = -0.075171*t34609;
  t34772 = -0.074034*t34609;
  t34777 = -0.074518*t34609;
  t34788 = -0.076572*t34609;
  t35080 = 0.05847*t34595;
  t35081 = -0.04153*t34619;
  t35084 = var1[1] + t34550 + t34558 + t34562 + t34581 + t35080 + t34610 + t35081;
  t34839 = -0.084351*t34824;
  t34843 = -0.089233*t34824;
  t34854 = -0.09409*t34824;
  t34858 = -0.098396*t34824;
  t34865 = -0.101684*t34824;
  t34871 = -0.103596*t34824;
  t34876 = -0.103928*t34824;
  t34881 = -0.102641*t34824;
  t34913 = -0.099877*t34824;
  t34923 = -0.095933*t34824;
  t34929 = -0.091239*t34824;
  t34936 = -0.086301*t34824;
  t34940 = -0.081657*t34824;
  t34950 = -0.077808*t34824;
  t34954 = -0.075171*t34824;
  t34966 = -0.074034*t34824;
  t34975 = -0.074518*t34824;
  t34983 = -0.076572*t34824;
  t35198 = 0.05847*t34818;
  t35199 = -0.04153*t34832;
  t35203 = var1[2] + t34791 + t34801 + t34809 + t34815 + t35198 + t34826 + t35199;
  p_output1[0]=t34075;
  p_output1[1]=t33659 + t33727 + t33799 + t33843 + 0.010084*t33897 + 0.010084*t34037 + t34085 + var1[0];
  p_output1[2]=t33659 + t33727 + t33799 + t33843 + 0.010605*t33897 + 0.010605*t34037 + t34181 + var1[0];
  p_output1[3]=t33659 + t33727 + t33799 + t33843 + 0.009977*t33897 + 0.009977*t34037 + t34270 + var1[0];
  p_output1[4]=t33659 + t33727 + t33799 + t33843 + 0.008268*t33897 + 0.008268*t34037 + t34278 + var1[0];
  p_output1[5]=t33659 + t33727 + t33799 + t33843 + 0.005663*t33897 + 0.005663*t34037 + t34286 + var1[0];
  p_output1[6]=t33659 + t33727 + t33799 + t33843 + 0.002444*t33897 + 0.002444*t34037 + t34292 + var1[0];
  p_output1[7]=t33659 + t33727 + t33799 + t33843 - 0.00104*t33897 - 0.00104*t34037 + t34352 + var1[0];
  p_output1[8]=t33659 + t33727 + t33799 + t33843 - 0.004411*t33897 - 0.004411*t34037 + t34375 + var1[0];
  p_output1[9]=t33659 + t33727 + t33799 + t33843 - 0.007304*t33897 - 0.007304*t34037 + t34388 + var1[0];
  p_output1[10]=t33659 + t33727 + t33799 + t33843 - 0.009406*t33897 - 0.009406*t34037 + t34394 + var1[0];
  p_output1[11]=t33659 + t33727 + t33799 + t33843 - 0.010488*t33897 - 0.010488*t34037 + t34405 + var1[0];
  p_output1[12]=t33659 + t33727 + t33799 + t33843 - 0.010434*t33897 - 0.010434*t34037 + t34413 + var1[0];
  p_output1[13]=t33659 + t33727 + t33799 + t33843 - 0.009249*t33897 - 0.009249*t34037 + t34491 + var1[0];
  p_output1[14]=t33659 + t33727 + t33799 + t33843 - 0.007061*t33897 - 0.007061*t34037 + t34503 + var1[0];
  p_output1[15]=t33659 + t33727 + t33799 + t33843 - 0.004109*t33897 - 0.004109*t34037 + t34511 + var1[0];
  p_output1[16]=t33659 + t33727 + t33799 + t33843 - 0.000711*t33897 - 0.000711*t34037 + t34523 + var1[0];
  p_output1[17]=t33659 + t33727 + t33799 + t33843 + 0.002763*t33897 + 0.002763*t34037 + t34531 + var1[0];
  p_output1[18]=t33659 + t33727 + t33799 + t33843 + 0.005939*t33897 + 0.005939*t34037 + t34537 + var1[0];
  p_output1[19]=t34075;
  p_output1[20]=t34627;
  p_output1[21]=t34550 + t34558 + t34562 + t34581 + 0.010084*t34595 + 0.010084*t34619 + t34629 + var1[1];
  p_output1[22]=t34550 + t34558 + t34562 + t34581 + 0.010605*t34595 + 0.010605*t34619 + t34645 + var1[1];
  p_output1[23]=t34550 + t34558 + t34562 + t34581 + 0.009977*t34595 + 0.009977*t34619 + t34651 + var1[1];
  p_output1[24]=t34550 + t34558 + t34562 + t34581 + 0.008268*t34595 + 0.008268*t34619 + t34671 + var1[1];
  p_output1[25]=t34550 + t34558 + t34562 + t34581 + 0.005663*t34595 + 0.005663*t34619 + t34679 + var1[1];
  p_output1[26]=t34550 + t34558 + t34562 + t34581 + 0.002444*t34595 + 0.002444*t34619 + t34688 + var1[1];
  p_output1[27]=t34550 + t34558 + t34562 + t34581 - 0.00104*t34595 - 0.00104*t34619 + t34696 + var1[1];
  p_output1[28]=t34550 + t34558 + t34562 + t34581 - 0.004411*t34595 - 0.004411*t34619 + t34705 + var1[1];
  p_output1[29]=t34550 + t34558 + t34562 + t34581 - 0.007304*t34595 - 0.007304*t34619 + t34712 + var1[1];
  p_output1[30]=t34550 + t34558 + t34562 + t34581 - 0.009406*t34595 - 0.009406*t34619 + t34718 + var1[1];
  p_output1[31]=t34550 + t34558 + t34562 + t34581 - 0.010488*t34595 - 0.010488*t34619 + t34724 + var1[1];
  p_output1[32]=t34550 + t34558 + t34562 + t34581 - 0.010434*t34595 - 0.010434*t34619 + t34734 + var1[1];
  p_output1[33]=t34550 + t34558 + t34562 + t34581 - 0.009249*t34595 - 0.009249*t34619 + t34740 + var1[1];
  p_output1[34]=t34550 + t34558 + t34562 + t34581 - 0.007061*t34595 - 0.007061*t34619 + t34750 + var1[1];
  p_output1[35]=t34550 + t34558 + t34562 + t34581 - 0.004109*t34595 - 0.004109*t34619 + t34762 + var1[1];
  p_output1[36]=t34550 + t34558 + t34562 + t34581 - 0.000711*t34595 - 0.000711*t34619 + t34772 + var1[1];
  p_output1[37]=t34550 + t34558 + t34562 + t34581 + 0.002763*t34595 + 0.002763*t34619 + t34777 + var1[1];
  p_output1[38]=t34550 + t34558 + t34562 + t34581 + 0.005939*t34595 + 0.005939*t34619 + t34788 + var1[1];
  p_output1[39]=t34627;
  p_output1[40]=t34834;
  p_output1[41]=t34791 + t34801 + t34809 + t34815 + 0.010084*t34818 + 0.010084*t34832 + t34839 + var1[2];
  p_output1[42]=t34791 + t34801 + t34809 + t34815 + 0.010605*t34818 + 0.010605*t34832 + t34843 + var1[2];
  p_output1[43]=t34791 + t34801 + t34809 + t34815 + 0.009977*t34818 + 0.009977*t34832 + t34854 + var1[2];
  p_output1[44]=t34791 + t34801 + t34809 + t34815 + 0.008268*t34818 + 0.008268*t34832 + t34858 + var1[2];
  p_output1[45]=t34791 + t34801 + t34809 + t34815 + 0.005663*t34818 + 0.005663*t34832 + t34865 + var1[2];
  p_output1[46]=t34791 + t34801 + t34809 + t34815 + 0.002444*t34818 + 0.002444*t34832 + t34871 + var1[2];
  p_output1[47]=t34791 + t34801 + t34809 + t34815 - 0.00104*t34818 - 0.00104*t34832 + t34876 + var1[2];
  p_output1[48]=t34791 + t34801 + t34809 + t34815 - 0.004411*t34818 - 0.004411*t34832 + t34881 + var1[2];
  p_output1[49]=t34791 + t34801 + t34809 + t34815 - 0.007304*t34818 - 0.007304*t34832 + t34913 + var1[2];
  p_output1[50]=t34791 + t34801 + t34809 + t34815 - 0.009406*t34818 - 0.009406*t34832 + t34923 + var1[2];
  p_output1[51]=t34791 + t34801 + t34809 + t34815 - 0.010488*t34818 - 0.010488*t34832 + t34929 + var1[2];
  p_output1[52]=t34791 + t34801 + t34809 + t34815 - 0.010434*t34818 - 0.010434*t34832 + t34936 + var1[2];
  p_output1[53]=t34791 + t34801 + t34809 + t34815 - 0.009249*t34818 - 0.009249*t34832 + t34940 + var1[2];
  p_output1[54]=t34791 + t34801 + t34809 + t34815 - 0.007061*t34818 - 0.007061*t34832 + t34950 + var1[2];
  p_output1[55]=t34791 + t34801 + t34809 + t34815 - 0.004109*t34818 - 0.004109*t34832 + t34954 + var1[2];
  p_output1[56]=t34791 + t34801 + t34809 + t34815 - 0.000711*t34818 - 0.000711*t34832 + t34966 + var1[2];
  p_output1[57]=t34791 + t34801 + t34809 + t34815 + 0.002763*t34818 + 0.002763*t34832 + t34975 + var1[2];
  p_output1[58]=t34791 + t34801 + t34809 + t34815 + 0.005939*t34818 + 0.005939*t34832 + t34983 + var1[2];
  p_output1[59]=t34834;
  p_output1[60]=t34990;
  p_output1[61]=t33659 + t33727 + t33799 + t33843 + 0.060084*t33897 - 0.039916*t34037 + t34085 + var1[0];
  p_output1[62]=t33659 + t33727 + t33799 + t33843 + 0.060605*t33897 - 0.039395*t34037 + t34181 + var1[0];
  p_output1[63]=t33659 + t33727 + t33799 + t33843 + 0.059977*t33897 - 0.040023*t34037 + t34270 + var1[0];
  p_output1[64]=t33659 + t33727 + t33799 + t33843 + 0.058268*t33897 - 0.041732*t34037 + t34278 + var1[0];
  p_output1[65]=t33659 + t33727 + t33799 + t33843 + 0.055663*t33897 - 0.044337*t34037 + t34286 + var1[0];
  p_output1[66]=t33659 + t33727 + t33799 + t33843 + 0.052444*t33897 - 0.047556*t34037 + t34292 + var1[0];
  p_output1[67]=t33659 + t33727 + t33799 + t33843 + 0.04896*t33897 - 0.05104*t34037 + t34352 + var1[0];
  p_output1[68]=t33659 + t33727 + t33799 + t33843 + 0.045589*t33897 - 0.054411*t34037 + t34375 + var1[0];
  p_output1[69]=t33659 + t33727 + t33799 + t33843 + 0.042696*t33897 - 0.057304*t34037 + t34388 + var1[0];
  p_output1[70]=t33659 + t33727 + t33799 + t33843 + 0.040594*t33897 - 0.059406*t34037 + t34394 + var1[0];
  p_output1[71]=t33659 + t33727 + t33799 + t33843 + 0.039512*t33897 - 0.060488*t34037 + t34405 + var1[0];
  p_output1[72]=t33659 + t33727 + t33799 + t33843 + 0.039566*t33897 - 0.060434*t34037 + t34413 + var1[0];
  p_output1[73]=t33659 + t33727 + t33799 + t33843 + 0.040751*t33897 - 0.059249*t34037 + t34491 + var1[0];
  p_output1[74]=t33659 + t33727 + t33799 + t33843 + 0.042939*t33897 - 0.057061*t34037 + t34503 + var1[0];
  p_output1[75]=t33659 + t33727 + t33799 + t33843 + 0.045891*t33897 - 0.054109*t34037 + t34511 + var1[0];
  p_output1[76]=t33659 + t33727 + t33799 + t33843 + 0.049289*t33897 - 0.050711*t34037 + t34523 + var1[0];
  p_output1[77]=t33659 + t33727 + t33799 + t33843 + 0.052763*t33897 - 0.047237*t34037 + t34531 + var1[0];
  p_output1[78]=t33659 + t33727 + t33799 + t33843 + 0.055939*t33897 - 0.044061*t34037 + t34537 + var1[0];
  p_output1[79]=t34990;
  p_output1[80]=t35084;
  p_output1[81]=t34550 + t34558 + t34562 + t34581 + 0.060084*t34595 - 0.039916*t34619 + t34629 + var1[1];
  p_output1[82]=t34550 + t34558 + t34562 + t34581 + 0.060605*t34595 - 0.039395*t34619 + t34645 + var1[1];
  p_output1[83]=t34550 + t34558 + t34562 + t34581 + 0.059977*t34595 - 0.040023*t34619 + t34651 + var1[1];
  p_output1[84]=t34550 + t34558 + t34562 + t34581 + 0.058268*t34595 - 0.041732*t34619 + t34671 + var1[1];
  p_output1[85]=t34550 + t34558 + t34562 + t34581 + 0.055663*t34595 - 0.044337*t34619 + t34679 + var1[1];
  p_output1[86]=t34550 + t34558 + t34562 + t34581 + 0.052444*t34595 - 0.047556*t34619 + t34688 + var1[1];
  p_output1[87]=t34550 + t34558 + t34562 + t34581 + 0.04896*t34595 - 0.05104*t34619 + t34696 + var1[1];
  p_output1[88]=t34550 + t34558 + t34562 + t34581 + 0.045589*t34595 - 0.054411*t34619 + t34705 + var1[1];
  p_output1[89]=t34550 + t34558 + t34562 + t34581 + 0.042696*t34595 - 0.057304*t34619 + t34712 + var1[1];
  p_output1[90]=t34550 + t34558 + t34562 + t34581 + 0.040594*t34595 - 0.059406*t34619 + t34718 + var1[1];
  p_output1[91]=t34550 + t34558 + t34562 + t34581 + 0.039512*t34595 - 0.060488*t34619 + t34724 + var1[1];
  p_output1[92]=t34550 + t34558 + t34562 + t34581 + 0.039566*t34595 - 0.060434*t34619 + t34734 + var1[1];
  p_output1[93]=t34550 + t34558 + t34562 + t34581 + 0.040751*t34595 - 0.059249*t34619 + t34740 + var1[1];
  p_output1[94]=t34550 + t34558 + t34562 + t34581 + 0.042939*t34595 - 0.057061*t34619 + t34750 + var1[1];
  p_output1[95]=t34550 + t34558 + t34562 + t34581 + 0.045891*t34595 - 0.054109*t34619 + t34762 + var1[1];
  p_output1[96]=t34550 + t34558 + t34562 + t34581 + 0.049289*t34595 - 0.050711*t34619 + t34772 + var1[1];
  p_output1[97]=t34550 + t34558 + t34562 + t34581 + 0.052763*t34595 - 0.047237*t34619 + t34777 + var1[1];
  p_output1[98]=t34550 + t34558 + t34562 + t34581 + 0.055939*t34595 - 0.044061*t34619 + t34788 + var1[1];
  p_output1[99]=t35084;
  p_output1[100]=t35203;
  p_output1[101]=t34791 + t34801 + t34809 + t34815 + 0.060084*t34818 - 0.039916*t34832 + t34839 + var1[2];
  p_output1[102]=t34791 + t34801 + t34809 + t34815 + 0.060605*t34818 - 0.039395*t34832 + t34843 + var1[2];
  p_output1[103]=t34791 + t34801 + t34809 + t34815 + 0.059977*t34818 - 0.040023*t34832 + t34854 + var1[2];
  p_output1[104]=t34791 + t34801 + t34809 + t34815 + 0.058268*t34818 - 0.041732*t34832 + t34858 + var1[2];
  p_output1[105]=t34791 + t34801 + t34809 + t34815 + 0.055663*t34818 - 0.044337*t34832 + t34865 + var1[2];
  p_output1[106]=t34791 + t34801 + t34809 + t34815 + 0.052444*t34818 - 0.047556*t34832 + t34871 + var1[2];
  p_output1[107]=t34791 + t34801 + t34809 + t34815 + 0.04896*t34818 - 0.05104*t34832 + t34876 + var1[2];
  p_output1[108]=t34791 + t34801 + t34809 + t34815 + 0.045589*t34818 - 0.054411*t34832 + t34881 + var1[2];
  p_output1[109]=t34791 + t34801 + t34809 + t34815 + 0.042696*t34818 - 0.057304*t34832 + t34913 + var1[2];
  p_output1[110]=t34791 + t34801 + t34809 + t34815 + 0.040594*t34818 - 0.059406*t34832 + t34923 + var1[2];
  p_output1[111]=t34791 + t34801 + t34809 + t34815 + 0.039512*t34818 - 0.060488*t34832 + t34929 + var1[2];
  p_output1[112]=t34791 + t34801 + t34809 + t34815 + 0.039566*t34818 - 0.060434*t34832 + t34936 + var1[2];
  p_output1[113]=t34791 + t34801 + t34809 + t34815 + 0.040751*t34818 - 0.059249*t34832 + t34940 + var1[2];
  p_output1[114]=t34791 + t34801 + t34809 + t34815 + 0.042939*t34818 - 0.057061*t34832 + t34950 + var1[2];
  p_output1[115]=t34791 + t34801 + t34809 + t34815 + 0.045891*t34818 - 0.054109*t34832 + t34954 + var1[2];
  p_output1[116]=t34791 + t34801 + t34809 + t34815 + 0.049289*t34818 - 0.050711*t34832 + t34966 + var1[2];
  p_output1[117]=t34791 + t34801 + t34809 + t34815 + 0.052763*t34818 - 0.047237*t34832 + t34975 + var1[2];
  p_output1[118]=t34791 + t34801 + t34809 + t34815 + 0.055939*t34818 - 0.044061*t34832 + t34983 + var1[2];
  p_output1[119]=t35203;
}



#ifdef MATLAB_MEX_FILE

#include "mex.h"
/*
 * Main function
 */
void mexFunction( int nlhs, mxArray *plhs[],
                  int nrhs, const mxArray *prhs[] )
{
  size_t mrows, ncols;

  double *var1;
  double *p_output1;

  /*  Check for proper number of arguments.  */ 
  if( nrhs != 1)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:invalidNumInputs", "One input(s) required (var1).");
    }
  else if( nlhs > 1)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:maxlhs", "Too many output arguments.");
    }

  /*  The input must be a noncomplex double vector or scaler.  */
  mrows = mxGetM(prhs[0]);
  ncols = mxGetN(prhs[0]);
  if( !mxIsDouble(prhs[0]) || mxIsComplex(prhs[0]) ||
    ( !(mrows == 21 && ncols == 1) && 
      !(mrows == 1 && ncols == 21))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var1 is wrong.");
    }

  /*  Assign pointers to each input.  */
  var1 = mxGetPr(prhs[0]);
   


   
  /*  Create matrices for return arguments.  */
  plhs[0] = mxCreateDoubleMatrix((mwSize) 20, (mwSize) 6, mxREAL);
  p_output1 = mxGetPr(plhs[0]);


  /* Call the calculation subroutine. */
  output1(p_output1,var1);


}

#else // MATLAB_MEX_FILE

#include "Link_r_lglut_to_r_leg_hpy_bar.hh"

namespace SymFunction
{

void Link_r_lglut_to_r_leg_hpy_bar_raw(double *p_output1, const double *var1)
{
  // Call Subroutines
  output1(p_output1, var1);

}

}

#endif // MATLAB_MEX_FILE
